{"version":3,"file":"styles.css","sources":["styles.scss","utilities/_variables.scss","utilities/_mixins.scss","utilities/_sprites.scss","layout/_layout.scss"],"sourcesContent":["\r\n@import \"utilities/variables\";\r\n@import \"utilities/mixins\";\r\n@import \"utilities/sprites\";\r\n\r\n\r\n@import \"layout/layout\";\r\n","/*------------------------------------*\\\r\n    $VARIABLES\r\n\\*------------------------------------*/\r\n\r\n// Responsiveness\r\n// -------------------------\r\n// 'true' is default\r\n//  setting this creates extra responsive classes targetting defined breakpoints\r\n//  eg the 'visually-hidden' mixin\r\n$responsive:        true!default;\r\n\r\n\r\n// Typography\r\n// -------------------------\r\n\r\n$font-family-sans:              Arial, sans-serif !default;\r\n$font-family-serif:             Georgia, \"Times New Roman\", Times, serif !default;\r\n$font-family-mono:              Monaco, Menlo, Consolas, \"Courier New\", monospace !default;\r\n$font-family-times-new-roman:   \"Times New Roman\", Times, Georgia, \"DejaVu Serif\", serif;\r\n$font-family-times:             Times, \"Times New Roman\", Georgia, \"DejaVu Serif\", serif;\r\n$font-family-georgia:           Georgia, \"Times New Roman\", \"DejaVu Serif\", serif;\r\n$font-family-verdana:           Verdana, Tahoma, \"DejaVu Sans\", sans-serif;\r\n$font-family-tahoma:            Tahoma, Verdana, \"DejaVu Sans\", sans-serif;\r\n$font-family-helvetica:         Helvetica, Arial, \"Nimbus Sans L\", sans-serif;\r\n$font-family-arial:             Arial, \"Helvetica Neue\", Helvetica, sans-serif;\r\n\r\n$font-family-base:              $font-family-serif !default;\r\n$font-family-alt:               $font-family-sans !default;\r\n\r\n// Custom 'brand' fonts\r\n$brand-font-1:   'Open Sans', sans-serif;  //Available weights 400,600,700\r\n\r\n// Let's set the base font size to 62.5% (10px) for easier calculations\r\n$base-font-size:   62.5%;\r\n$base-line-height: 1.4 !default;\r\n\r\n$body-font-desktop: 1.4; // = 14px\r\n$body-font-mobile:  1.4; // = 14px\r\n\r\n// Breakpoints\r\n// -------------------------\r\n\r\n// Named breakpoints\r\n$breakpoint-xs: 320px;\r\n$breakpoint-sm: 768px;\r\n$breakpoint-md: 992px;\r\n$breakpoint-lg: 1200px;\r\n\r\n// Suggestion - provide a minimum/maximum so media queries don't overlap when required\r\n// use as max/min values for mixins for responsive utilities etc\r\n\r\n$xs-min: 0;\r\n$xs-max: ($breakpoint-sm - 1);\r\n\r\n$sm-min: $breakpoint-sm;\r\n$sm-max: ($breakpoint-md - 1);\r\n\r\n$md-min: $breakpoint-md;\r\n$md-max: ($breakpoint-lg - 1);\r\n\r\n$lg-min: $breakpoint-lg;\r\n\r\n\r\n// Paths\r\n// -------------------------\r\n\r\n// Path to images folder\r\n// $images: /images;\r\n\r\n// Path to fonts folder\r\n// $fonts: /fonts;\r\n\r\n\r\n// Colors\r\n// -------------------------\r\n\r\n// Base colors\r\n$white: #fff;\r\n$black: #000;\r\n\r\n$grey-dark: #666;\r\n$grey-light: #ddd;\r\n$grey-lighter: #eee;\r\n\r\n$blue: #4777b7;\r\n$purple: #7d1f71;\r\n$green: #298700;\r\n$red: #db1731;\r\n$orange: #d08300;\r\n\r\n// Brand colors\r\n$brand-colour-1: $orange;\r\n\r\n// Text colors\r\n$color-text:     #333;\r\n$color-headings: #141414;\r\n$color-error:    #eee;\r\n\r\n// Link colors\r\n$color-link-active:    #cc0000;\r\n$color-link-visited:   #cc0000;\r\n$color-link-hover:     #333333;\r\n$color-link-focus:     #d4d4d4;\r\n$color-link-disabled:  #d4d4d4;\r\n\r\n\r\n// Borders\r\n// -------------------------\r\n\r\n// Border colors\r\n$color-border:          $grey-light;\r\n$color-border-dark:     $grey-dark;\r\n$color-border-light:    $grey-lighter;\r\n\r\n//  Border styling\r\n$border-radius:         5px;\r\n$border-width:          1px;\r\n$border-style:          solid;\r\n$border-color:          $color-border;\r\n\r\n$border:                $border-width $border-style $border-color;\r\n\r\n\r\n// z-index scale (private vars)\r\n// Do not edit the z-index scale! \r\n// --------------------------------------------------\r\n$z-index-1:   100;\r\n$z-index-2:   200;\r\n$z-index-3:   300;\r\n$z-index-4:   400;\r\n$z-index-5:   500;\r\n$z-index-6:   600;\r\n$z-index-7:   700;\r\n$z-index-8:   800;\r\n$z-index-9:   900;\r\n$z-index-10: 1000;\r\n\r\n\r\n// z-index master list\r\n// Add application scoped z-index values as variables.\r\n// Group elements by layer to enable easy determination of relative layering of disconnected elements\r\n// REALLY useful for someone unfamiliar with your project!\r\n// --------------------------------------------------------------------------------------------------\r\n\r\n$z-index-modal-backdrop:        $z-index-1;\r\n//$z-index-some-other element:  $z-index-1; // some other element on the same relative layer\r\n\r\n$z-index-modal:                 $z-index-2; // a higher layer than its background\r\n\r\n$z-index-modal-dialog:          $z-index-3;\r\n\r\n$z-index-cookie-policy:         $z-index-4; // will always appear above modals\r\n\r\n       \r\n\r\n","\r\n//REM px font size\r\n@mixin font-size($size: 1.4) {\r\n    font-size: ($size * 10) + px;\r\n    font-size: $size + rem;\r\n}\r\n\r\n// opacity\r\n@mixin opacity($opacity) {\r\n  opacity: $opacity;\r\n  $opacity-ie: $opacity * 100;\r\n  filter: alpha(opacity=$opacity-ie); //IE8\r\n}\r\n// eg  @include opacity(0.8);\r\n\r\n\r\n// Clearfix\r\n// Source: http://nicolasgallagher.com/micro-clearfix-hack/\r\n//\r\n// For modern browsers\r\n// 1. The space content is one way to avoid an Opera bug when the\r\n//    contenteditable attribute is included anywhere else in the document.\r\n//    Otherwise it causes space to appear at the top and bottom of elements\r\n//    that are clearfixed.\r\n// 2. The use of `table` rather than `block` is only necessary if using\r\n//    `:before` to contain the top-margins of child elements.\r\n@mixin clearfix() {\r\n    &:before,\r\n    &:after {\r\n        content: \" \"; // 1\r\n        display: table; // 2\r\n    }\r\n    &:after {\r\n        clear: both;\r\n    }\r\n}\r\n\r\n@mixin visually-hidden {\r\n    border: 0!important;\r\n    clip: rect(0 0 0 0)!important;\r\n    height: 1px!important;\r\n    margin:-1px!important;\r\n    overflow: hidden!important;\r\n    padding: 0!important;\r\n    position: absolute!important;\r\n    width: 1px!important;\r\n}\r\n\r\n@mixin hidden {\r\n    display: none !important;\r\n    visibility: hidden !important;\r\n}\r\n\r\n@mixin display-block {\r\n    display: block !important;\r\n    width: 100% !important;\r\n}\r\n\r\n@mixin display-inline {\r\n    display: inline-block !important;\r\n}\r\n\r\n@function strip-unit($num) {\r\n    @return $num / ($num * 0 + 1);\r\n}\r\n\r\n\r\n@mixin rem-fallback($property, $values...) {\r\n    $max: length($values);\r\n    $pxValues: '';\r\n    $remValues: '';\r\n\r\n    @for $i from 1 through $max {\r\n        $value: strip-unit(nth($values, $i));\r\n        $pxValues: #{$pxValues + $value*10}px;\r\n\r\n        @if $i < $max {\r\n          $pxValues: #{$pxValues + \" \"};\r\n        }\r\n    }\r\n\r\n    @for $i from 1 through $max {\r\n        $value: strip-unit(nth($values, $i));\r\n        $remValues: #{$remValues + $value}rem;\r\n\r\n        @if $i < $max {\r\n          $remValues: #{$remValues + \" \"};\r\n        }\r\n    }\r\n\r\n    #{$property}: $pxValues;\r\n    #{$property}: $remValues;\r\n}\r\n\r\n\r\n// uses breakpoints defined in variables.scss\r\n@mixin breakpoint($point, $value: 0) {\r\n\r\n    @if $point == xs {\r\n        @media screen and (max-width: $xs-max) { @content; }\r\n    }\r\n\r\n    @else if $point == sm {\r\n        @media screen and (min-width: $sm-min) { @content; }\r\n    }\r\n\r\n    @else if $point == md {\r\n        @media screen and (min-width: $md-min) { @content; }\r\n    }\r\n\r\n    @else if $point == lg {\r\n        @media screen and (min-width: $lg-min) { @content; }\r\n    }\r\n\r\n    @else {\r\n        @media screen and ($point: $value) { @content; }\r\n    }\r\n\r\n}\r\n\r\n@mixin between-breakpoints($min, $max) {\r\n    @media screen and (min-width: $min) and (max-width: $max) {\r\n        @content;\r\n    }\r\n}\r\n\r\n\r\n// get-sprite.sass\r\n// sprite mixin that can be used to include a sprite into media queries\r\n// @include get-sprite($map, $sprite, $height, $width, $offset-x, $offset-y, $repeat);\r\n// $map is the name of the sprite map, this is auto-generated as a global\r\n// sass var when you do a (for instance) @import \"sprites-x2/*.png\"\r\n// ----------\r\n// Example: @include get-sprite($sprites-x2-sprites, logo, false, false);\r\n//\r\n\r\n@mixin get-sprite($map, $sprite, $height: true, $width: true, $offset-x: 0, $offset-y: 0, $repeat: no-repeat) {\r\n//http://compass-style.org/reference/compass/helpers/sprites/#sprite-file\r\n$sprite-image: sprite-file($map, $sprite);\r\n\r\n// http://compass-style.org/reference/compass/helpers/sprites/#sprite-url\r\n$sprite-map: sprite-url($map);\r\n\r\n// http://compass-style.org/reference/compass/helpers/sprites/#sprite-position\r\n$sprite-position: sprite-position($map, $sprite, $offset-x, $offset-y);\r\n\r\n// Returns background\r\nbackground: $sprite-map $sprite-position $repeat;\r\n\r\n// http://compass-style.org/reference/compass/helpers/image-dimensions/\r\n// Checks to see if the user wants height returned\r\n@if $height == true {\r\n    // Gets the height of the sprite-image\r\n    $sprite-height: image-height($sprite-image);\r\n    // Returns the height\r\n    height: $sprite-height;\r\n}\r\n\r\n// http://compass-style.org/reference/compass/helpers/image-dimensions/\r\n// Checks to see if the user wants height returned\r\n@if $width == true {\r\n    // Gets the width of the sprite-image\r\n    $sprite-width: image-width($sprite-image);\r\n    // Returns the width\r\n    width: $sprite-width; }\r\n}\r\n\r\n","$svg-sprite: (\n  sprite: (\n    width: 154px,\n    height: 82px,\n    padding: (\n      top: 20px,\n      right: 20px,\n      bottom: 20px,\n      left: 20px\n    ),\n    pngPath: '../../images/sprites/sprite.png',\n    svgPath: '../../images/sprites/sprite.svg'\n  ),\n\n  icon-close: (\n    width: 27px,\n    height: 27px,\n    backgroundX: 0px,\n    backgroundY: 0px\n  ),\n  icon-menu: (\n    width: 47px,\n    height: 42px,\n    backgroundX: -67px,\n    backgroundY: 0px\n  ),\n);\n\n\n// the $svg-sprite var is generated by the gulp-svg-sprites module\n// and is a sass map containing all the svg sprite info.\n$sprite: map-get($svg-sprite, sprite) !default;\n$sprite-padding: map-get($sprite, padding);\n$pngSpriteClass: '.no-svg';\n\n// function for merging sass maps\n@function extend($map, $ext-map) {\n  @return map-merge($map, $ext-map);\n}\n\n// Gets an attribute from the sass map\n@function sprite-attr($icon, $attr) {\n  $icon: map-get($svg-sprite, $icon);\n  @return map-get($icon, $attr);\n}\n\n// retrieve the icons attributes\n@function icon-attr($icon) {\n  $attr: (\n    width: sprite-attr($icon, width),\n    height: sprite-attr($icon, height),\n    x: (sprite-attr($icon, backgroundX) - map-get($sprite-padding, left)),\n    y: (sprite-attr($icon, backgroundY) - map-get($sprite-padding, top))\n  );\n\n  @return $attr;\n}\n\n\n// For use with the gulp sprite plugin\n@mixin sprite($icon, $conf: ()) {\n  $conf: extend((\n    type: all,\n    offset-x: 0,\n    offset-y: 0,\n  ), $conf);\n\n  $iconAttr: icon-attr($icon);\n  $type: map-get($conf, type);\n  $widthRatio: 1;\n  $heightRatio: 1;\n\n  // Outputs dimensions\n  @if $type == all or $type == size {\n    @if map-get($conf, width) {\n      width: map-get($conf, width)\n    }\n    @else {\n      width: map-get($iconAttr, width);\n    }\n\n    @if map-get($conf, height) {\n      height: map-get($conf, height)\n    }\n    @else {\n      height: map-get($iconAttr, height);\n    }\n  }\n\n  // Outputs background position\n  @if $type == all or $type == bg {\n    @if map-get($conf, width) {\n      $widthRatio: map-get($conf, width) / map-get($iconAttr, width);\n    }\n    @if map-get($conf, height) {\n      $heightRatio: map-get($conf, height) / map-get($iconAttr, height);\n    }\n\n    $pos-x: (map-get($iconAttr, x) + map-get($conf, offset-x)) * $widthRatio;\n    $pos-y: (map-get($iconAttr, y) + map-get($conf, offset-y)) * $heightRatio;\n\n    background-position: $pos-x $pos-y;\n  }\n\n  // Outputs background size and image\n  //@if not $type == size {\n    // compare that ratio difference between the desired size and the actual size,\n    // then apply this ratio to the background size\n    background-size: (map-get($sprite, width) * $widthRatio)  (map-get($sprite, height) * $heightRatio);\n    background-image: url(map-get($sprite, svgPath));\n\n    //with png fallback\n    @if $pngSpriteClass {\n      @if not($type == size) {\n        #{$pngSpriteClass} & {\n          background-image: url(map-get($sprite, pngPath));\n        }\n      }\n    }\n  //}\n}\n\n","/*------------------------------------*\\\r\n    $LAYOUT\r\n\\*------------------------------------*/\r\n\r\n// General structure of main site elements such as body, page-wrapper, header, main, footer etc.\r\n\r\nbody {\r\n    background: #f3f3f3;\r\n    overflow-x: hidden;\r\n}\r\n\r\n.page-wrapper {\r\n    margin: 0 auto;\r\n    background: #fff;\r\n}\r\n\r\n\r\n\r\n.main {\r\n    position: relative;\r\n    margin: 0 auto;\r\n    clear: both;\r\n    margin: 0 0 20px 0;\r\n}\r\n\r\n"],"mappings":"ACAA;wCAEwC;AGFxC;wCAEwC;AAIxC,IAAI,CAAC;EACD,UAAU,EAAE,OAAQ;EACpB,UAAU,EAAE,MAAO,GACtB;;AAED,aAAa,CAAC;EACV,MAAM,EAAE,MAAO;EACf,UAAU,EAAE,IAAK,GACpB;;AAID,KAAK,CAAC;EACF,QAAQ,EAAE,QAAS;EACnB,MAAM,EAAE,MAAO;EACf,KAAK,EAAE,IAAK;EACZ,MAAM,EAAE,UAAW,GACtB","names":[],"sourceRoot":"/source/"}